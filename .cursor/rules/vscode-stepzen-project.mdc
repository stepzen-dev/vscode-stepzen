---
description: 
globs: 
alwaysApply: false
---
# VSCode StepZen Extension Architecture Rules

**CRITICAL**: Before making any architectural decisions, read `docs/architecture.md` for the complete layered design and service registry pattern.

## Layered Architecture

Follow this strict import hierarchy:

```
Extension Layer (Commands, Panels, Utils) 
    ↓ (can import from)
Service Registry (CLI, Logger, ProjectResolver, SchemaIndex, Request)
    ↓ (can import from)  
Schema Processing Layer (Indexer, Linker, Parser)
    ↓ (can import from)
Types (Pure data structures)
```

**ESLint enforces these boundaries automatically.**

## Core Patterns

### Service Usage
```typescript
// Always use the service registry
import { services } from "../services";

services.logger.info("Message");
services.cli.deploy();
```

### Error Handling
```typescript
import { handleError, ValidationError } from "../errors";

try {
  // risky operation
} catch (err) {
  handleError(err); // Logs and shows user notification
}
```

### Command Structure
```typescript
export async function commandName() {
  // 1. Check workspace trust if needed
  if (!vscode.workspace.isTrusted) {
    vscode.window.showWarningMessage("Feature not available in untrusted workspaces");
    return;
  }

  // 2. Validate preconditions
  const editor = vscode.window.activeTextEditor;
  if (!editor) {
    vscode.window.showErrorMessage("No active editor");
    return;
  }

  // 3. Main logic with error handling
  try {
    services.logger.info("Command started");
    // Implementation
  } catch (err) {
    handleError(err);
  }
}
```

## Code Standards

- **No console statements**: Use `services.logger` instead
- **TypeScript strict mode**: All type checking enabled
- **Dependency injection**: Use service registry for testability
- **Constants**: Import from `utils/constants` (shared configuration)

---

*Portions of the Content may be generated with the assistance of CursorAI*
